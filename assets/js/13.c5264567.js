(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{395:function(e,_,v){"use strict";v.r(_);var o=v(25),t=Object(o.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"前端认证技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前端认证技术"}},[e._v("#")]),e._v(" 前端认证技术")]),e._v(" "),v("h2",{attrs:{id:"概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),v("p",[e._v("总所周知，"),v("code",[e._v("http")]),e._v(" 本身是一种无状态的协议，那么 "),v("code",[e._v("http")]),e._v(" 是如何进行用户身份认证并且记住用户的状态的?")]),e._v(" "),v("p",[e._v("举个栗子:用户登录之后，就不会再跳转至登录页了，而是跳转到正常的业务页面。")]),e._v(" "),v("p",[e._v("要想实现上述的场景需求，首先我们需要理解什么是 认证(Authentication)。")]),e._v(" "),v("blockquote",[v("p",[e._v("服务器端通过一系列手段(收集到用户的账号和密码等)进行用户身份认证，认证通过后让其无障碍的访问服务器端的资源。")])]),e._v(" "),v("p",[e._v("常规认证流程如下：")]),e._v(" "),v("p",[e._v("当用户输入用户名，密码之后 ==> 发送到服务器端验证 ==> 验证通过 ==> 返回 Token(授权标识) ==> 前端存储 Token ==> 下次请求将其带上，即可实现认证流程。")]),e._v(" "),v("p",[e._v("关于前端存储这一块儿，可以借助前端的存储技术,比如: "),v("code",[e._v("localStorage")]),e._v(", "),v("code",[e._v("Cookies")]),e._v(", "),v("code",[e._v("Sesion")]),e._v("。")]),e._v(" "),v("p",[e._v("对于前端存储技术的介绍可以前往: "),v("a",{attrs:{href:"https://huhui-coder.github.io/vue-press-docs/pages/browser/storage.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端存储技术"),v("OutboundLink")],1)]),e._v(" "),v("h2",{attrs:{id:"认证技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#认证技术"}},[e._v("#")]),e._v(" 认证技术")]),e._v(" "),v("p",[e._v("接下来详细讲讲四种不同方式的认证手段。")]),e._v(" "),v("ol",[v("li",[e._v("HTTP Basic Authentication")]),e._v(" "),v("li",[e._v("Sesion-Cookie")]),e._v(" "),v("li",[e._v("Token 验证")]),e._v(" "),v("li",[e._v("OAuth(开放授权)")])]),e._v(" "),v("h3",{attrs:{id:"http-basic-authentication"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-basic-authentication"}},[e._v("#")]),e._v(" HTTP Basic Authentication")]),e._v(" "),v("p",[e._v("这种授权方式是浏览器遵守 "),v("code",[e._v("http")]),e._v(" 协议实现的基本授权方式, "),v("code",[e._v("http")]),e._v(" 协议进行通信的过程中，"),v("code",[e._v("http")]),e._v(" 协议定义了基本认证认证允许 "),v("code",[e._v("http")]),e._v(" 服务器对客户端进行用户身份证的方法。")]),e._v(" "),v("p",[e._v("认证过程：")]),e._v(" "),v("p",[e._v("1． 客户端向服务器请求数据，请求的内容可能是一个网页或者是一个"),v("code",[e._v("ajax")]),e._v("异步请求，此时，假设客户端尚未被验证，则客户端提供如下请求至服务器:")]),e._v(" "),v("div",{staticClass:"language-http line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[e._v("Get /index.html HTTP/1.0\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Host:")]),e._v("www.google.com\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br")])]),v("p",[e._v("2． 服务器向客户端发送验证请求代码 401,（WWW-Authenticate: Basic realm=”google.com”这句话是关键，如果没有客户端不会弹出用户名和密码输入界面）服务器返回的数据大抵如下：")]),e._v(" "),v("div",{staticClass:"language-http line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[v("span",{pre:!0,attrs:{class:"token response-status"}},[v("span",{pre:!0,attrs:{class:"token http-version property"}},[e._v("HTTP/1.0")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token status-code number"}},[e._v("401")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token reason-phrase string"}},[e._v("Unauthorised")])]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Server:")]),e._v(" SokEvo/1.0\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("WWW-Authenticate:")]),e._v(" Basic realm=”google.com”\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-Type:")]),e._v(" text/html\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-Length:")]),e._v(" xxx\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br"),v("span",{staticClass:"line-number"},[e._v("4")]),v("br"),v("span",{staticClass:"line-number"},[e._v("5")]),v("br")])]),v("p",[e._v("3． 当符合 "),v("code",[e._v("http1.0")]),e._v(" 或 "),v("code",[e._v("1.1")]),e._v(" 规范的客户端（如 IE，FIREFOX）收到 401 返回值时，将自动弹出一个登录窗口，要求用户输入用户名和密码。")]),e._v(" "),v("p",[e._v("4． 用户输入用户名和密码后，将用户名及密码以 "),v("code",[e._v("base64")]),e._v(" 加密方式加密，并将密文放入前一条请求信息中，则客户端发送的第一条请求信息则变成如下内容：")]),e._v(" "),v("div",{staticClass:"language-http line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[e._v("Get /index.html HTTP/1.0\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Host:")]),e._v("www.google.com\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Authorization:")]),e._v(" Basic d2FuZzp3YW5n\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br")])]),v("p",[e._v("注：d2FuZzp3YW5n 表示加密后的用户名及密码（用户名：密码 然后通过 "),v("code",[e._v("base64")]),e._v(" 加密，加密过程是浏览器默认的行为，不需要我们人为加密，我们只需要输入用户名密码即可）")]),e._v(" "),v("p",[e._v("5． 服务器收到上述请求信息后，将 "),v("code",[e._v("Authorization")]),e._v(" 字段后的用户信息取出、解密，将解密后的用户名及密码与用户数据库进行比较验证，如用户名及密码正确，服务器则根据请求，将所请求资源发送给客户端。")]),e._v(" "),v("p",[e._v("效果：\n客户端未未认证的时候，会弹出用户名密码输入框，这个时候请求时属于 pending 状态，这个时候其实服务当用户输入用户名密码的时候客户端会再次发送带 "),v("code",[e._v("Authentication")]),e._v(" 头的请求。")]),e._v(" "),v("p",[e._v("这个是出现较早的认证方式，实际使用中较少用到。仅做了解即可。")]),e._v(" "),v("h3",{attrs:{id:"sesion-cookie"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sesion-cookie"}},[e._v("#")]),e._v(" Sesion-Cookie")]),e._v(" "),v("p",[v("code",[e._v("HTTP Cookie")]),e._v(" 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。 "),v("code",[e._v("Cookie")]),e._v(" 使基于无状态的 "),v("code",[e._v("HTTP协议")]),e._v(" 记录稳定的状态信息成为了可能。")]),e._v(" "),v("p",[v("code",[e._v("Cookie")]),e._v(" 主要用于以下三个方面：")]),e._v(" "),v("ol",[v("li",[e._v("会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）")]),e._v(" "),v("li",[e._v("个性化设置（如用户自定义设置、主题等）")]),e._v(" "),v("li",[e._v("浏览器行为跟踪（如跟踪分析用户行为等）")]),e._v(" "),v("li",[e._v("认证过程")])]),e._v(" "),v("p",[e._v("服务器在接受客户端首次访问时在服务器端创建 "),v("code",[e._v("seesion")]),e._v(" ，然后保存 "),v("code",[e._v("seesion")]),e._v(" (我们可以将 "),v("code",[e._v("seesion")]),e._v(" 保存在内存中，也可以保存在 "),v("code",[e._v("redis")]),e._v(" 中，推荐使用后者)，然后给这个 "),v("code",[e._v("Sesion")]),e._v(" 生成一个唯一的标识字符串,然后在响应头中种下这个唯一标识字符串。")]),e._v(" "),v("p",[e._v("签名。这一步只是对 "),v("code",[e._v("Sesion_ID")]),e._v(" 进行加密处理，服务端会根据这个 "),v("code",[e._v("secret")]),e._v(" 密钥进行解密。（非必需步骤）")]),e._v(" "),v("p",[e._v("浏览器中收到请求响应的时候会解析响应头，然后将 "),v("code",[e._v("Sesion_ID")]),e._v(" 保存在本地 "),v("code",[e._v("Cookie")]),e._v(" 中，浏览器在下次 "),v("code",[e._v("http")]),e._v(" 请求的请求头中会带上该域名下的 "),v("code",[e._v("Cookie")]),e._v(" 信息。")]),e._v(" "),v("p",[e._v("服务器在接受客户端请求时会去解析请求头 "),v("code",[e._v("Cookie")]),e._v(" 中的 "),v("code",[e._v("Sesion_ID")]),e._v(" ，然后根据这个 "),v("code",[e._v("Sesion_ID")]),e._v(" 去找服务器端保存的该客户端的 "),v("code",[e._v("Sesion")]),e._v(" ，然后判断该请求是否合法。")]),e._v(" "),v("p",[e._v("一旦用户登出，服务端和客户端同时销毁该会话在后续请求中，服务器会根据数据库验证会话 "),v("code",[e._v("id")]),e._v(" ，如果验证通过，则继续处理；")]),e._v(" "),v("h4",{attrs:{id:"优缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[e._v("#")]),e._v(" 优缺点")]),e._v(" "),v("p",[e._v("优点:")]),e._v(" "),v("ol",[v("li",[e._v("安全性高: 信息存储在服务器, 不易篡改。")]),e._v(" "),v("li",[e._v("可以存储较大信息: "),v("code",[e._v("Cookie")]),e._v(" 本身仅支持 4Kb 以下, 而 "),v("code",[e._v("Sesion")]),e._v(" 存储于服务器, 依靠于数据库, 容量不限。")]),e._v(" "),v("li",[e._v("存储类型多样: "),v("code",[e._v("Cookie")]),e._v(" 只允许字符串类型, 而 "),v("code",[e._v("Sesion")]),e._v(" 允许任意类型。")]),e._v(" "),v("li",[e._v("可控性高: "),v("code",[e._v("Cookie")]),e._v(" 本身只能设置固定有效时间, 而 "),v("code",[e._v("Sesion")]),e._v(" 存储于服务器, 可以适应多种场景, 有效进行管理。\n"),v("ol",[v("li",[e._v("删除非法 "),v("code",[e._v("Sesion")])]),e._v(" "),v("li",[e._v("过期自动清理 "),v("code",[e._v("Sesion")])]),e._v(" "),v("li",[e._v("刷新有效时间")])])])]),e._v(" "),v("p",[e._v("缺点:")]),e._v(" "),v("ol",[v("li",[e._v("服务器存在负担: 随着用户量的增大, 每个用户都存储交互信息在服务器, 势必造成服务器负担。")]),e._v(" "),v("li",[v("code",[e._v("Sesion")]),e._v(" 依靠 HTTPS 安全访问: 在不安全的网络环境下, "),v("code",[e._v("Cookie")]),e._v(" 会被盗用, 意味着 "),v("code",[e._v("Sesion_ID")]),e._v(" 会被盗用")]),e._v(" "),v("li",[v("code",[e._v("Sesion_ID")]),e._v(" 盗用风险: 正如上一点所说, 其实 "),v("code",[e._v("Sesion_ID")]),e._v(" 就是早期的 "),v("code",[e._v("Token")]),e._v(" , 一旦被盗用就会导致非法用户盗用 "),v("code",[e._v("Sesion")]),e._v(" 。")]),e._v(" "),v("li",[e._v("不可跨域: 这是由于 "),v("code",[e._v("Cookie")]),e._v(" 不可跨域导致, 不同域名需要不同验证")]),e._v(" "),v("li",[e._v("不可共享: 在多集群服务器的情况下, A 服务器和 B 服务器 "),v("code",[e._v("Sesion")]),e._v(" 不共享, 需要而外进行配置")]),e._v(" "),v("li",[e._v("CSRS 攻击: 如果网站存在恶意脚本比如 "),v("a",{attrs:{href:"http://www.bank.com/api/transfer?count=1000&to=Tom",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.bank.com/api/transfer?count=1000&to=Tom"),v("OutboundLink")],1),e._v(", 这种脚本存储在一段文本甚至是一张图片中, 如果我们使用 "),v("code",[e._v("Sesion")]),e._v(" 的方式, 当我们点击图片就会导致触发。")])]),e._v(" "),v("h3",{attrs:{id:"token-验证"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#token-验证"}},[e._v("#")]),e._v(" Token 验证")]),e._v(" "),v("p",[e._v("认证过程：")]),e._v(" "),v("ol",[v("li",[e._v("用户输入登陆凭据；")]),e._v(" "),v("li",[e._v("服务器验证凭据是否正确，然后返回一个经过签名的 "),v("code",[e._v("Token")]),e._v(" ；")]),e._v(" "),v("li",[e._v("客户端负责存储 "),v("code",[e._v("Token")]),e._v(" ，可以存在 "),v("code",[e._v("localstorage")]),e._v(" ，或者 "),v("code",[e._v("Cookie")]),e._v(" 中")]),e._v(" "),v("li",[e._v("对服务器的请求带上这个 "),v("code",[e._v("Token")]),e._v(" ；")]),e._v(" "),v("li",[e._v("服务器对 "),v("code",[e._v("JWT")]),e._v(" 进行解码，如果 "),v("code",[e._v("Token")]),e._v(" 有效，则处理该请求；")]),e._v(" "),v("li",[e._v("一旦用户登出，客户端销毁 "),v("code",[e._v("Token")]),e._v(" 。")])]),e._v(" "),v("p",[v("code",[e._v("Cookie-Sesion")]),e._v(" 与 "),v("code",[e._v("taken")]),e._v(" 看上去很像，那么他们到底有什么区别呢？")]),e._v(" "),v("p",[e._v("从标识的所携带的信息来看：\n"),v("code",[e._v("Cookie-Sesion")]),e._v(" 中的 "),v("code",[e._v("Sesion_ID")]),e._v("他只是一个唯一标识的字符串，服务端是根据这个字符串，来查询在服务器端保持的 "),v("code",[e._v("seesion")]),e._v(" ，这里面才保存着用户的登陆状态。")]),e._v(" "),v("p",[e._v("但是 "),v("code",[e._v("Token")]),e._v(" 本身就是一种登陆成功凭证，他是在登陆成功后根据某种规则生成的一种信息凭证，他里面本身就保存着用户的登陆状态。服务器端只需要根据定义的规则校验这个 "),v("code",[e._v("Token")]),e._v(" 是否合法就行。")]),e._v(" "),v("p",[e._v("从使用方式来看：\n"),v("code",[e._v("Cookie-Sesion")]),e._v(" 是需要 "),v("code",[e._v("Cookie")]),e._v(" 配合的，那么在 "),v("code",[e._v("http")]),e._v(" 代理客户端的选择上就是只有浏览器了，因为只有浏览器才会去解析请求响应头里面的 "),v("code",[e._v("Cookie")]),e._v(" ,然后每次请求再默认带上该域名下的 "),v("code",[e._v("Cookie")]),e._v(" 。但是我们知道 "),v("code",[e._v("http")]),e._v(" 代理客户端不只有浏览器，还有原生 APP 等等，这个时候 "),v("code",[e._v("Cookie")]),e._v(" 是不起作用的，或者浏览器端是可以禁止"),v("code",[e._v("Cookie")]),e._v(" 的。")]),e._v(" "),v("p",[e._v("但是 "),v("code",[e._v("Token")]),e._v(" 就不一样，他是登陆请求在登陆成功后再请求响应体中返回的信息，客户端在收到响应的时候，可以把他存在本地的 "),v("code",[e._v("Cookie")]),e._v(" , "),v("code",[e._v("storage")]),e._v("，或者内存中，然后再下一次请求的请求头重带上这个 "),v("code",[e._v("Token")]),e._v(" 就行了。(通常是放置到 "),v("code",[e._v("http")]),e._v(" 请求头里的 "),v("code",[e._v("Authorization")]),e._v(" 上)\n简单点来说"),v("code",[e._v("Cookie-Sesion")]),e._v("机制他限制了客户端的类型，而"),v("code",[e._v("Token")]),e._v("验证机制丰富了客户端类型。")]),e._v(" "),v("p",[e._v("从时效性来看：\n"),v("code",[e._v("Sesion-Cookie")]),e._v("的"),v("code",[e._v("Sesionid")]),e._v("实在登陆的时候生成的而且在登出事时一直不变的，在一定程度上安全就会低，而"),v("code",[e._v("Token")]),e._v("是可以在一段时间内动态改变的。\n可扩展性。"),v("code",[e._v("Token")]),e._v("验证本身是比较灵活的，一是"),v("code",[e._v("Token")]),e._v("的解决方案有许多，常用的是"),v("code",[e._v("JWT")]),e._v("，二来我们可以基于"),v("code",[e._v("Token")]),e._v("验证机制，专门做一个鉴权服务，用它向多个服务的请求进行统一鉴权。")]),e._v(" "),v("h4",{attrs:{id:"优缺点-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-2"}},[e._v("#")]),e._v(" 优缺点")]),e._v(" "),v("p",[e._v("优点：")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("Token")]),e._v(" 可以防范, 或者说是专门防范 "),v("code",[e._v("CSRF")]),e._v(" 攻击, 不会被自动加入请求头。")]),e._v(" "),v("li",[v("code",[e._v("Token")]),e._v(" 存储在报文头的 "),v("code",[e._v("Authorization")]),e._v(" 字段中。")]),e._v(" "),v("li",[v("code",[e._v("Token")]),e._v(" 支持跨域, 可以与第三方共享, 具体原理后续会介绍。")]),e._v(" "),v("li",[v("code",[e._v("Token")]),e._v(" 不依赖于 "),v("code",[e._v("Cookie")]),e._v(" 在移动端中适配良好。")]),e._v(" "),v("li",[v("code",[e._v("Token")]),e._v(" 存储在客户端("),v("code",[e._v("localStorage")]),e._v("), 使服务器无状态化, 减少负担。")])]),e._v(" "),v("p",[e._v("缺点:")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("Token")]),e._v(" 不能管理自己发出的令牌, 如果令牌被盗用, 服务端也难以进行注销。对此 "),v("code",[e._v("Sesion")]),e._v(" 的优势就很明显, 可以很好的管控自己的会话。")])]),e._v(" "),v("h3",{attrs:{id:"oauth-2-0-开放授权"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#oauth-2-0-开放授权"}},[e._v("#")]),e._v(" OAuth 2.0(开放授权)")]),e._v(" "),v("p",[e._v("OAuth 2.0 是一个业界标准的授权协议，其定义了四种可以适用于各种应用场景的授权交互模式：授权码模式、应用授信模式、用户授信模式、简化模式。其中，授权码模式被广泛应用于第三方互联网开放平台，通过第三方登录是其最常见应用场景之一，比如使用微信、QQ 和淘宝账号进行登录。")]),e._v(" "),v("p",[e._v("详见："),v("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/92051359",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://zhuanlan.zhihu.com/p/92051359"),v("OutboundLink")],1)]),e._v(" "),v("h2",{attrs:{id:"实践"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[e._v("#")]),e._v(" 实践")]),e._v(" "),v("p",[e._v("结合 XXX 项目来谈谈实际项目中是如何做项目鉴权的。")]),e._v(" "),v("p",[e._v("XX 的前端架构是 FE ==> BFF ==> GO。")]),e._v(" "),v("p",[e._v("由于这种特殊的架构，通常是将鉴权放置到 BFF 项目中进行的。")]),e._v(" "),v("p",[e._v("任何一个 "),v("code",[e._v("FE")]),e._v(" 的 "),v("code",[e._v("HTTP")]),e._v(" 请求都会先走到 "),v("code",[e._v("BFF")]),e._v("(Koa 2) 的路由拦截器中，对于每一个请求，我们都需要从请求中的请求头拿到 "),v("code",[e._v("Authorization")]),e._v(" 字段，然后将字段进行验证，判断是否有效(通过 "),v("code",[e._v("GO")]),e._v(" 提供的接口进行验证)，如果有效，则放行。如果 "),v("code",[e._v("Token")]),e._v(" 已经过期，用 "),v("code",[e._v("refresh_Token")]),e._v(" 进行 "),v("code",[e._v("Token")]),e._v(" 的续期，拿到新的 "),v("code",[e._v("Token")]),e._v(" 再进行验证，验证通过放行，如果 "),v("code",[e._v("refresh_Token")]),e._v(" 也无效，返回 "),v("code",[e._v("401")]),e._v(" 状态码给 "),v("code",[e._v("FE")]),e._v(" , "),v("code",[e._v("FE")]),e._v(" 跳转到登录页。")]),e._v(" "),v("p",[e._v("结合图示说明如下：")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h2suf3hdyhj21010u0ab9.jpg",alt:"XXX认证流程"}})]),e._v(" "),v("p",[e._v("此时，我们采用的方案是 "),v("code",[e._v("GO")]),e._v(" 颁发 "),v("code",[e._v("Token")]),e._v(" 认证信息(采用的是 JWT 授权方式)， "),v("code",[e._v("BFF")]),e._v(" 进行权限的校验。")]),e._v(" "),v("p",[e._v("对于 在 "),v("code",[e._v("Koa2")]),e._v(" 中自行实现, "),v("code",[e._v("Sesion-coookie")]),e._v(" 和 "),v("code",[e._v("Token")]),e._v(" 验证方式的授权也很简单， "),v("code",[e._v("Koa2")]),e._v(" 有对应的 中间件可直接使用，分别是: "),v("a",{attrs:{href:"https://www.npmjs.com/package/Koa-Sesion",target:"_blank",rel:"noopener noreferrer"}},[e._v("Koa-Sesion"),v("OutboundLink")],1),e._v(" 和 "),v("a",{attrs:{href:"https://www.npmjs.com/package/Koa-jwt",target:"_blank",rel:"noopener noreferrer"}},[e._v("Koa-jwt"),v("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=t.exports}}]);