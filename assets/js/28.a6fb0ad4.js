(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{405:function(t,v,_){"use strict";_.r(v);var r=_(25),n=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"link-与-import"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#link-与-import"}},[t._v("#")]),t._v(" link 与@import")]),t._v(" "),_("ul",[_("li",[t._v("link 与 import , 本质使用上，我们都是用他来引入 css，但是他们有一定的区别。")])]),t._v(" "),_("p",[t._v("link 是一种引入资源的标签，import 是引入 css 的方式。所以，import 引入的只能是 css，而 link 可以引入所有的资源，包括图片，RSS 等。")]),t._v(" "),_("ul",[_("li",[t._v("加载顺序上也有一些差异。")])]),t._v(" "),_("p",[t._v("link 引用的 CSS 会同时被加载。\nimport 引用的 CSS 会等到页面全部被下载完再加载。")]),t._v(" "),_("ul",[_("li",[t._v("兼容性的差别。")])]),t._v(" "),_("p",[t._v("link 无任何兼容问题")]),t._v(" "),_("ul",[_("li",[t._v("动态引入样式")])]),t._v(" "),_("p",[t._v("link 可以后期引入样式，而 import 是不可以后期引入的，只能初始化页面之前引入。")]),t._v(" "),_("ul",[_("li",[t._v("复用率的问题")])]),t._v(" "),_("p",[t._v("import 可以复用之前的 css 文件，而 link 只能一次引用一个文件。\n当然，import 复用文件时，在浏览器实际上是加载了多个文件，会有多个请求。而每一个 link 只是一个 http 请求。")]),t._v(" "),_("h1",{attrs:{id:"async-与-defer"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#async-与-defer"}},[t._v("#")]),t._v(" async 与 defer")]),t._v(" "),_("p",[t._v("首先分析这两个属性为何而存在的问题。")]),t._v(" "),_("p",[t._v("在日渐复杂的前端，异常已经是程序的一部分。如果出现一些小问题，或者服务器加载上出现延迟。而我们默认的引入的 script 脚本，会阻塞后续的 DOM 渲染。一旦没有部分异常无法及时加载完成，那么我们的页面因为阻塞问题，将整个白屏。\n也许我们可以保证自己服务器的正常，但是你决定保证不了第三方服务器的正常，于是引入了 async 和 defer 来优化这个问题。\n再来谈谈 script 的默认，async，defer 的之前的差异。\n默认情况下：\n浏览器会立即加载并执行指定的脚本。指定的脚本，指在 script 标签之上的脚本。所以，如果 script 放在 header 中，而对应的文件还未加载完成，会形成阻塞。所以这就是现在很多页面，都会使用默认且把 scipt 放在页面结尾的原因。")]),t._v(" "),_("p",[t._v("async 情况下：\nasync ，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。async 是"),_("strong",[t._v("乱序")]),t._v("的。")]),t._v(" "),_("p",[t._v("defer 情况下：\ndefer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），"),_("strong",[t._v("但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。"),_("strong",[t._v("defer 是")]),t._v("顺序执行")]),t._v("。")]),t._v(" "),_("h1",{attrs:{id:"分清事件委托-事件冒泡-事件捕获。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分清事件委托-事件冒泡-事件捕获。"}},[t._v("#")]),t._v(" 分清事件委托，事件冒泡，事件捕获。")]),t._v(" "),_("p",[t._v("这三者的关系：")]),t._v(" "),_("ul",[_("li",[t._v("事件捕获和冒泡是现代浏览器的执行事件的两个不同阶段。")]),t._v(" "),_("li",[t._v("事件委托是利用冒泡阶段的运行机制来实现的")])]),t._v(" "),_("p",[t._v("通过"),_("code",[t._v("addEventListener()")]),t._v("的第三个属性来设置事件是通过捕获阶段注册的（true），还是冒泡阶段注册的（false）。默认情况下是 false。")]),t._v(" "),_("p",[t._v("冒泡的具体表现:从实际操作的元素（事件）向上级父元素一级一级执行下去，直到达到"),_("code",[t._v("<html>")]),t._v("(从下到上)\n捕获的具体表现:浏览器检查元素的最外层祖先"),_("code",[t._v("<html>")]),t._v("，是否在捕获阶段中注册了一个 onclick 事件处理程序，如果是，则运行它。")]),t._v(" "),_("p",[t._v("然后，它移动到"),_("code",[t._v("<html>")]),t._v("中的下一个元素(点击的元素的父元素)，并执行相同的操作，然后是下一个元素(点击的元素的父元素)，依此类推，直到到达实际点击的元素。\n事件委托的原理:事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div>ul>li>a;比如给最里面的 a 加一个 click 点击事件，那么这个事件就会一层一层的往外执行，执行顺序 a>li>ul>div，有这样一个机制，那么我们给最外面的 div 加点击事件，那么里面的 ul，li，a 做点击事件的时候，都会冒泡到最外层的 div 上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。")]),t._v(" "),_("p",[t._v("事件委托的应用场景: 如果你想要在大量子元素（包括动态添加的）中单击任何一个就可以运行一段代码，这个时候可以把事件监听器设置在父节点上。")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://www.cnblogs.com/liugang-vip/p/5616484.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文献"),_("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=n.exports}}]);